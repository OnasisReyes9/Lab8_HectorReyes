/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab8_hectorreyes;

import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.Principal;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Onasis Reyes
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        this.setLocationRelativeTo(null);
        DefaultTableModel model = (DefaultTableModel) jTbl_musica.getModel();
        String nRow[] = {"Modificar Canciones"};
        model.addRow(nRow);
        String nRow2[] = {"Eliminar Registro de Canciones"};
        model.addRow(nRow2);
        String nRow3[] = {"PlayList"};
        model.addRow(nRow3);
        jTbl_musica.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popUpMenuCanciones = new javax.swing.JPopupMenu();
        jMI_modificar = new javax.swing.JMenu();
        jMI_modificarNombreCancion = new javax.swing.JMenuItem();
        jMI_modificarAñoEstreno = new javax.swing.JMenuItem();
        jMI_modificarArtistaAlbum = new javax.swing.JMenuItem();
        jMI_modificarPuntuacion = new javax.swing.JMenuItem();
        jMI_modificarNombreAlbum = new javax.swing.JMenuItem();
        popUpMenuPlayList = new javax.swing.JPopupMenu();
        jMI_crearPlayList = new javax.swing.JMenuItem();
        jMI_abrirPlayList = new javax.swing.JMenuItem();
        jMI_guardarCambios = new javax.swing.JMenuItem();
        popUpMenuEliminarRegistro = new javax.swing.JPopupMenu();
        jMI_eliminarCancion = new javax.swing.JMenuItem();
        jMI_eliminarTodo = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jT_nombreCancion = new javax.swing.JTextField();
        jT_año = new javax.swing.JTextField();
        jT_artista = new javax.swing.JTextField();
        jSp_puntuacionPlayList = new javax.swing.JSpinner();
        btn_aggCancion = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTbl_canciones = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btn_removerDeLaTabla = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btn_cleanJtable = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jT_nombreAlbum = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTbl_musica = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        jMI_modificar.setText("Modificar Canción");

        jMI_modificarNombreCancion.setText("Nombre de la Canción");
        jMI_modificarNombreCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_modificarNombreCancionActionPerformed(evt);
            }
        });
        jMI_modificar.add(jMI_modificarNombreCancion);

        jMI_modificarAñoEstreno.setText("Año de Estreno");
        jMI_modificarAñoEstreno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_modificarAñoEstrenoActionPerformed(evt);
            }
        });
        jMI_modificar.add(jMI_modificarAñoEstreno);

        jMI_modificarArtistaAlbum.setText("Artista del Álbum");
        jMI_modificarArtistaAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_modificarArtistaAlbumActionPerformed(evt);
            }
        });
        jMI_modificar.add(jMI_modificarArtistaAlbum);

        jMI_modificarPuntuacion.setText("Puntuación");
        jMI_modificarPuntuacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_modificarPuntuacionActionPerformed(evt);
            }
        });
        jMI_modificar.add(jMI_modificarPuntuacion);

        jMI_modificarNombreAlbum.setText("Nombre del Álbum");
        jMI_modificarNombreAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_modificarNombreAlbumActionPerformed(evt);
            }
        });
        jMI_modificar.add(jMI_modificarNombreAlbum);

        popUpMenuCanciones.add(jMI_modificar);

        jMI_crearPlayList.setText("Crear PLayList");
        jMI_crearPlayList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_crearPlayListActionPerformed(evt);
            }
        });
        popUpMenuPlayList.add(jMI_crearPlayList);

        jMI_abrirPlayList.setText("Abrir PlayList");
        jMI_abrirPlayList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_abrirPlayListActionPerformed(evt);
            }
        });
        popUpMenuPlayList.add(jMI_abrirPlayList);

        jMI_guardarCambios.setText("Guardar Cambios");
        jMI_guardarCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_guardarCambiosActionPerformed(evt);
            }
        });
        popUpMenuPlayList.add(jMI_guardarCambios);

        jMI_eliminarCancion.setText("Eliminar Canción");
        jMI_eliminarCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_eliminarCancionActionPerformed(evt);
            }
        });
        popUpMenuEliminarRegistro.add(jMI_eliminarCancion);

        jMI_eliminarTodo.setText("Eliminar Todas Las Canciones");
        jMI_eliminarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_eliminarTodoActionPerformed(evt);
            }
        });
        popUpMenuEliminarRegistro.add(jMI_eliminarTodo);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jSp_puntuacionPlayList.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));

        btn_aggCancion.setText("Añadir Canción a la Tabla");
        btn_aggCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aggCancionActionPerformed(evt);
            }
        });

        jTbl_canciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Canción", "Año de Estreno", "Artista del álbum", "Puntuación", "Nombre del Álbum"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTbl_canciones);
        if (jTbl_canciones.getColumnModel().getColumnCount() > 0) {
            jTbl_canciones.getColumnModel().getColumn(0).setResizable(false);
            jTbl_canciones.getColumnModel().getColumn(1).setResizable(false);
            jTbl_canciones.getColumnModel().getColumn(2).setResizable(false);
            jTbl_canciones.getColumnModel().getColumn(3).setResizable(false);
            jTbl_canciones.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Nombre de la Canción");

        btn_removerDeLaTabla.setText("Remover Canción");
        btn_removerDeLaTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_removerDeLaTablaActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Puntuación de la Canción");

        btn_cleanJtable.setText("Borrar Canciones");
        btn_cleanJtable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cleanJtableActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Año en que salió la canción");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Nombre del Álbum");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Artista del Álbum");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Añadir Canción");

        jTbl_musica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mi Música"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTbl_musica.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTbl_musicaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTbl_musica);
        if (jTbl_musica.getColumnModel().getColumnCount() > 0) {
            jTbl_musica.getColumnModel().getColumn(0).setResizable(false);
        }

        jLabel7.setText("Para crear una playList debes tener mínimo una canción seleccionada de");

        jLabel8.setText("tabla. Si abres una canción, cualquier canción no guardada se perderá.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_aggCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_cleanJtable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_removerDeLaTabla))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(95, 95, 95))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel6))
                                        .addGap(35, 35, 35)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel2))
                                .addGap(41, 41, 41)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jT_nombreAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jT_artista, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jT_año, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jT_nombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSp_puntuacionPlayList, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 24, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel8)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jT_nombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jT_año, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jT_artista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jT_nombreAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSp_puntuacionPlayList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_aggCancion)
                    .addComponent(btn_cleanJtable)
                    .addComponent(btn_removerDeLaTabla))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cleanJtableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cleanJtableActionPerformed
        // TODO add your handling code here:
        if (jTbl_canciones.getRowCount() >= 0) {
            cleanJtable();
        } else {
            JOptionPane.showMessageDialog(this, "No existen canciones en la tabla :c");
        }
    }//GEN-LAST:event_btn_cleanJtableActionPerformed

    private void btn_removerDeLaTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_removerDeLaTablaActionPerformed
        // TODO add your handling code here:
        if (jTbl_canciones.getSelectedRow() >= 0 && archivoActual == null) {
            DefaultTableModel model = (DefaultTableModel) jTbl_canciones.getModel();
            model.removeRow(jTbl_canciones.getSelectedRow());
            jTbl_canciones.setModel(model);
        } else {
            jMI_eliminarCancionActionPerformed(evt);
        }
    }//GEN-LAST:event_btn_removerDeLaTablaActionPerformed

    private void btn_aggCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aggCancionActionPerformed
        // TODO add your handling code here:
        if (!jT_nombreCancion.getText().equals("")
                && !jT_año.getText().equals("")
                && !jT_artista.getText().equals("") 
                && !jT_nombreAlbum.getText().equals("")){
         String[] nRow = {
            jT_nombreCancion.getText(),
            jT_año.getText(),
            jT_artista.getText(),
            jSp_puntuacionPlayList.getValue() + "",
            jT_nombreAlbum.getText()};
        DefaultTableModel model = (DefaultTableModel) jTbl_canciones.getModel();
        model.addRow(nRow);
        jTbl_canciones.setModel(model);
        jT_año.setText("");
        jT_nombreCancion.setText("");
        jT_nombreAlbum.setText("");
        jT_artista.setText("");
        jSp_puntuacionPlayList.setValue(0);   
        } else {
            JOptionPane.showMessageDialog(this, "No existen canciones en la tabla.");
        }
    }//GEN-LAST:event_btn_aggCancionActionPerformed

    private void jTbl_musicaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTbl_musicaMouseClicked
        // TODO add your handling code here:
        if (evt.isMetaDown()) {
            int row = jTbl_musica.getSelectedRow();
            //nodoActual = (DefaultMutableTreeNode) v1;
            switch (row) {
                case 0:
                    popUpMenuCanciones.show(evt.getComponent(),
                            0, 0);
                    break;
                case 1:
                    popUpMenuEliminarRegistro.show(evt.getComponent(),
                            1, 0);
                    break;
                case 2:
                    popUpMenuPlayList.show(evt.getComponent(),
                            2, 0);
                    break;
                default:
                    break;
            }
        }
    }//GEN-LAST:event_jTbl_musicaMouseClicked

    private void jMI_modificarNombreCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_modificarNombreCancionActionPerformed
        // TODO add your handling code here:
        if (archivoActual != null) {
            try {
                if (jTbl_canciones.getSelectedRow() >= 0) {
                    int index = jTbl_canciones.getSelectedRow();
                    String nombreCancion = JOptionPane.showInputDialog("Ingrese nombre de la canción: ");
                    FileWriter fw = null;
                    BufferedWriter bw = null;
                    DefaultTableModel model = (DefaultTableModel) jTbl_canciones.getModel();
                    model.setValueAt(nombreCancion, index, 0);
                    String ruta = archivoActual.getPath();
                    try {
                        if (archivoActual.exists()) {
                            fw = new FileWriter(ruta);
                            bw = new BufferedWriter(fw);
                            for (int i = 0; i < model.getRowCount(); i++) {
                                for (int j = 0; j < model.getColumnCount(); j++) {
                                    if (j < model.getColumnCount() - 1) {
                                        bw.write((String) model.getValueAt(i, j) + "|");
                                    } else {
                                        bw.write((String) model.getValueAt(i, j));
                                        bw.write("\n");
                                    }
                                }//fin for
                            }//fin for
                        }//fin if
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Ha ocurrido un error em el proceso.");
                    }
                    jTbl_canciones.setModel(model);
                    bw.flush();
                    JOptionPane.showMessageDialog(this, "Se ha modificado el nombre de la canción¡! c:");
                } else {
                    JOptionPane.showMessageDialog(
                            this, "Porfavor selecciona la canción que deseas modificar.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Ha ocurrido un error.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No tienes ninguna canción o playList seleccionada.");
        }
    }//GEN-LAST:event_jMI_modificarNombreCancionActionPerformed

    private void jMI_modificarAñoEstrenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_modificarAñoEstrenoActionPerformed
        // TODO add your handling code here:
        boolean flag = true;
        int año = 0;
        if (jTbl_canciones.getSelectedRow() >= 0) {
            try {
                año = Integer.parseInt(JOptionPane.showInputDialog("Ingrese nombre de la canción: "));
                flag = true;
            } catch (Exception e) {
                flag = false;
                JOptionPane.showMessageDialog(this, "Solo los números son válidos.");
            }
            if (flag == false) {
                JOptionPane.showMessageDialog(this, "Solo puedes ingresar "
                        + "números para representar los años. :c");
            } else {
                String year = Integer.toString(año);
                int index = jTbl_canciones.getSelectedRow();
                FileWriter fw = null;
                BufferedWriter bw = null;
                DefaultTableModel model = (DefaultTableModel) jTbl_canciones.getModel();
                model.setValueAt(year, index, 1);
                String ruta = archivoActual.getPath();
                try {
                    if (archivoActual.exists()) {
                        fw = new FileWriter(ruta);
                        bw = new BufferedWriter(fw);
                        for (int i = 0; i < model.getRowCount(); i++) {
                            for (int j = 0; j < model.getColumnCount(); j++) {
                                if (j < model.getColumnCount() - 1) {
                                    bw.write((String) model.getValueAt(i, j) + "|");
                                } else {
                                    bw.write((String) model.getValueAt(i, j));
                                    bw.write("\n");
                                }
                            }//fin for
                        }//fin for
                    }//fin if
                    bw.flush();
                    JOptionPane.showMessageDialog(this, "Se ha modificado el año de estreno¡! c:");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Ha ocurrido un error em el proceso.");
                }//fin catch
            }//fin if
        } else {
            JOptionPane.showMessageDialog(this, "No tienes ninguna canción o playList seleccionada.");
        }
    }//GEN-LAST:event_jMI_modificarAñoEstrenoActionPerformed

    private void jMI_modificarArtistaAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_modificarArtistaAlbumActionPerformed
        // TODO add your handling code here:
        if (jTbl_canciones.getSelectedRow() >= 0) {
            try {
                int index = jTbl_canciones.getSelectedRow();
                String nombreArtista = JOptionPane.showInputDialog("Ingrese nombre del artita: ");
                FileWriter fw = null;
                BufferedWriter bw = null;
                DefaultTableModel model = (DefaultTableModel) jTbl_canciones.getModel();
                model.setValueAt(nombreArtista, index, 2);
                String ruta = archivoActual.getPath();
                try {
                    if (archivoActual.exists()) {
                        fw = new FileWriter(ruta);
                        bw = new BufferedWriter(fw);
                        for (int i = 0; i < model.getRowCount(); i++) {
                            for (int j = 0; j < model.getColumnCount(); j++) {
                                if (j < model.getColumnCount() - 1) {
                                    bw.write((String) model.getValueAt(i, j) + "|");
                                } else {
                                    bw.write((String) model.getValueAt(i, j));
                                    bw.write("\n");
                                }
                            }//fin for
                        }//fin for
                    }//fin if
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Ha ocurrido un error em el proceso.");
                }
                jTbl_canciones.setModel(model);
                bw.flush();
                JOptionPane.showMessageDialog(this, "Se ha modificado el nombre del artista¡! c:");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Ha ocurrido un error em el proceso.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No tienes ninguna canción o playList seleccionada.");
        }
    }//GEN-LAST:event_jMI_modificarArtistaAlbumActionPerformed

    private void jMI_modificarPuntuacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_modificarPuntuacionActionPerformed
        // TODO add your handling code here:
        if (jTbl_canciones.getSelectedRow() >= 0) {
            try {
                int puntuacion = Integer.parseInt(
                        JOptionPane.showInputDialog("Ingrese puntuacion de la canción[0-10]: "));
                if (puntuacion >= 0 && puntuacion <= 10) {
                    String puntation = Integer.toString(puntuacion);
                    int index = jTbl_canciones.getSelectedRow();
                    FileWriter fw = null;
                    BufferedWriter bw = null;
                    DefaultTableModel model = (DefaultTableModel) jTbl_canciones.getModel();
                    model.setValueAt(puntation, index, 3);
                    String ruta = archivoActual.getPath();
                    try {
                        if (archivoActual.exists()) {
                            fw = new FileWriter(ruta);
                            bw = new BufferedWriter(fw);
                            for (int i = 0; i < model.getRowCount(); i++) {
                                for (int j = 0; j < model.getColumnCount(); j++) {
                                    if (j < model.getColumnCount() - 1) {
                                        bw.write((String) model.getValueAt(i, j) + "|");
                                    } else {
                                        bw.write((String) model.getValueAt(i, j));
                                        bw.write("\n");
                                    }
                                }//fin for
                            }//fin for
                        }//fin if
                        jTbl_canciones.setModel(model);
                        bw.flush();
                        JOptionPane.showMessageDialog(this, "Se ha modificado la puntuación¡! c:");
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(this, "Ha ocurrido un error em el proceso.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "La puntuación debe estar en el rango [0-10]");
                }
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Solo números válidos.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No tienes ninguna canción o playList seleccionada.");
        }
    }//GEN-LAST:event_jMI_modificarPuntuacionActionPerformed

    private void jMI_modificarNombreAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_modificarNombreAlbumActionPerformed
        // TODO add your handling code here:

        if (jTbl_canciones.getSelectedRow() >= 0) {
            try {
                int index = jTbl_canciones.getSelectedRow();
                String nombreAlbum = JOptionPane.showInputDialog("Ingrese nombre del álbum: ");
                FileWriter fw = null;
                BufferedWriter bw = null;
                DefaultTableModel model = (DefaultTableModel) jTbl_canciones.getModel();
                model.setValueAt(nombreAlbum, index, 4);
                String ruta = archivoActual.getPath();
                if (archivoActual.exists()) {
                    fw = new FileWriter(ruta);
                    bw = new BufferedWriter(fw);
                    for (int i = 0; i < model.getRowCount(); i++) {
                        for (int j = 0; j < model.getColumnCount(); j++) {
                            if (j < model.getColumnCount() - 1) {
                                bw.write((String) model.getValueAt(i, j) + "|");
                            } else {
                                bw.write((String) model.getValueAt(i, j));
                                bw.write("\n");
                            }
                        }//fin for
                    }//fin for
                }//fin if
                jTbl_canciones.setModel(model);
                bw.flush();
                JOptionPane.showMessageDialog(this, "Se ha modificado el nombre del álbum¡! c:");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Ha ocurrido un error em el proceso.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No tienes ninguna canción o playList seleccionada.");
        }
    }//GEN-LAST:event_jMI_modificarNombreAlbumActionPerformed

    private void jMI_abrirPlayListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_abrirPlayListActionPerformed
        // TODO add your handling code here:
        File file = null;
        FileReader fr = null;
        BufferedReader br = null;
        cleanJtable();
        DefaultTableModel model = (DefaultTableModel) jTbl_canciones.getModel();
        try {
            JFileChooser jfc = new JFileChooser("./");
            FileNameExtensionFilter filtro
                    = new FileNameExtensionFilter(
                            "Archivos de Texto", "txt");
            jfc.setFileFilter(filtro);
            int seleccion = jfc.showOpenDialog(this);
            if (seleccion == JFileChooser.APPROVE_OPTION) {
                file = jfc.getSelectedFile();
                archivoActual = jfc.getSelectedFile();
                fr = new FileReader(file);
                br = new BufferedReader(fr);
                String linea;
                cleanJtable();
                while ((linea = br.readLine()) != null) {
                    linea = linea.replace("|", ";");
                    String[] filas = linea.split(";");
                    model.addRow(filas);
                }//fin while
                archivoActual = file;

                PlayList playList = new PlayList(jfc.getSelectedFile().getPath(), jfc.getSelectedFile().getPath());
                playListActual = playList;

                br.close();
                fr.close();
            } //fin if
        } catch (Exception e) {
        }
        jTbl_canciones.setModel(model);
    }//GEN-LAST:event_jMI_abrirPlayListActionPerformed

    private void jMI_crearPlayListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_crearPlayListActionPerformed
        // TODO add your handling code here:
        if (jTbl_canciones.getSelectedRow() >= 0) {
            // String nombrePlayList = JOptionPane.showInputDialog("Ingrese el nombre de la PlayList");
            JFileChooser jfc = new JFileChooser();
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto", "txt");//"txt"
            jfc.setFileFilter(filtro);
            int seleccion = jfc.showSaveDialog(this);
            FileWriter fw = null;
            BufferedWriter bw = null;
            if (seleccion == JFileChooser.APPROVE_OPTION) {
                try {
                    File file = null;
                    if (jfc.getFileFilter().getDescription().equals("Archivos de Texto")) {
                        file = new File(jfc.getSelectedFile().getPath() + ".txt");
                    } else {
                        file = jfc.getSelectedFile();
                    }
                    archivoActual = file;
                    PlayList playList = new PlayList(jfc.getSelectedFile().getPath(), jfc.getSelectedFile().getPath());
                    playListActual = playList;

                    fw = new FileWriter(file);
                    bw = new BufferedWriter(fw);
                    DefaultTableModel model = (DefaultTableModel) jTbl_canciones.getModel();
                    for (int i = 0; i < model.getRowCount(); i++) {
                        for (int j = 0; j < model.getColumnCount(); j++) {
                            if (j < model.getColumnCount() - 1) {
                                bw.write((String) model.getValueAt(i, j) + "|");
                            } else {
                                bw.write((String) model.getValueAt(i, j));
                                bw.write("\n");
                            }
                        }//fin for
                    }//fin for
                    bw.flush();
                    //   bw.close();
                    //fw.close();
                    JOptionPane.showMessageDialog(this,
                            "Se ha guardado la PlayList! c:");
                } catch (IOException io) {
                    JOptionPane.showMessageDialog(this,
                            "Ha ocurrido un error y no se ha podido crear la PlayList");
                }
            }//fin if seleccion
        } else if (archivoActual == null) {
            JOptionPane.showMessageDialog(this, "No tienes activa ninguna playlist. :c");
        } else if (jTbl_canciones.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this, "No hay una canción seleccionada para la creación de una playList.");
        }//fin if fila seleccionada
    }//GEN-LAST:event_jMI_crearPlayListActionPerformed

    private void jMI_guardarCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_guardarCambiosActionPerformed
        // TODO add your handling code here:
        if (archivoActual != null) {
            DefaultTableModel model = (DefaultTableModel) jTbl_canciones.getModel();
            String acum = "";
            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    acum += model.getValueAt(i, j).toString() + ";";
                }
                acum += "\n";
            }
            if (acum.length() >= 1) {
                acum = acum.substring(0, acum.length() - 1);
            }
            acum = acum.replace(";", "|");
            FileWriter fw;
            String acumFinal = "";
            for (int i = 0; i < acum.length() - 1; i++) {
                acumFinal += acum.charAt(i);
            }
            try {
                fw = new FileWriter(archivoActual);
                try (BufferedWriter bw = new BufferedWriter(fw)) {
                    bw.write(acumFinal);
                    bw.flush();
                    JOptionPane.showMessageDialog(this, "Se han guardado los cambios.");
                }
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            jMI_crearPlayListActionPerformed(evt);
        }
    }//GEN-LAST:event_jMI_guardarCambiosActionPerformed

    private void jMI_eliminarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_eliminarTodoActionPerformed
        // TODO add your handling code here:
        if (archivoActual != null) {
            FileWriter fw = null;
            BufferedWriter bw = null;
            String ruta = archivoActual.getPath();
            // DefaultTableModel model = (DefaultTableModel) jTbl_canciones.getModel();
            cleanJtable();
            try {
                fw = new FileWriter(ruta);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Ha ocurrido un error. :c");
            }
            bw = new BufferedWriter(fw);
            try {
                bw.write("");
                bw.flush();
                JOptionPane.showMessageDialog(this, "Se han removido todas las canciones");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Ha ocurrido un error. :c");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No tienes una lista activa. :C");
        }
    }//GEN-LAST:event_jMI_eliminarTodoActionPerformed

    private void jMI_eliminarCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_eliminarCancionActionPerformed
        // TODO add your handling code here:
        if (archivoActual != null) {
            try {
                if (jTbl_canciones.getSelectedRow() >= 0) {
                    int index = jTbl_canciones.getSelectedRow();
                    DefaultTableModel model = (DefaultTableModel) jTbl_canciones.getModel();
                    FileWriter fw = null;
                    BufferedWriter bw = null;
                    String ruta = archivoActual.getPath();
                    fw = new FileWriter(ruta);
                    bw = new BufferedWriter(fw);
                     for (int i = 0; i < model.getRowCount(); i++) {
                        for (int j = 0; j < model.getColumnCount(); j++) {
                            if (index != i) {
                                if (j < model.getColumnCount() - 1) {
                                    bw.write((String) model.getValueAt(i, j) + "|");
                                } else {
                                    bw.write((String) model.getValueAt(i, j));
                                    bw.write("\n");
                                }
                            }//fin if
                        }//fin for
                    }//fin for
                      model.removeRow(index);
                    jTbl_canciones.setModel(model);
                    bw.flush();
                    JOptionPane.showMessageDialog(this, "Se ha removido una canción de la lista.");
                } else {
                    JOptionPane.showMessageDialog(this, "No tienes seleccionada una canción o playlist. :c");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Ha ocurrido un error. :c");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No tienes una lista activa. :C");
        }
    }//GEN-LAST:event_jMI_eliminarCancionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_aggCancion;
    private javax.swing.JButton btn_cleanJtable;
    private javax.swing.JButton btn_removerDeLaTabla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuItem jMI_abrirPlayList;
    private javax.swing.JMenuItem jMI_crearPlayList;
    private javax.swing.JMenuItem jMI_eliminarCancion;
    private javax.swing.JMenuItem jMI_eliminarTodo;
    private javax.swing.JMenuItem jMI_guardarCambios;
    private javax.swing.JMenu jMI_modificar;
    private javax.swing.JMenuItem jMI_modificarArtistaAlbum;
    private javax.swing.JMenuItem jMI_modificarAñoEstreno;
    private javax.swing.JMenuItem jMI_modificarNombreAlbum;
    private javax.swing.JMenuItem jMI_modificarNombreCancion;
    private javax.swing.JMenuItem jMI_modificarPuntuacion;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSp_puntuacionPlayList;
    private javax.swing.JTextField jT_artista;
    private javax.swing.JTextField jT_año;
    private javax.swing.JTextField jT_nombreAlbum;
    private javax.swing.JTextField jT_nombreCancion;
    private javax.swing.JTable jTbl_canciones;
    private javax.swing.JTable jTbl_musica;
    private javax.swing.JPopupMenu popUpMenuCanciones;
    private javax.swing.JPopupMenu popUpMenuEliminarRegistro;
    private javax.swing.JPopupMenu popUpMenuPlayList;
    // End of variables declaration//GEN-END:variables
    private Cancion cancionActual;
    private PlayList playListActual;
    private File archivoActual = null;

    public void cleanJtable() {
        jTbl_canciones.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Canción", "Año de Estreno", "Artista del álbum", "Puntuación", "Nombre del Álbum"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
    }

}
